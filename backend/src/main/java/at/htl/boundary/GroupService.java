package at.htl.boundary;

import at.htl.model.Group;
import at.htl.model.Student;
import at.htl.repositories.GroupRepository;
import org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.info.Contact;
import org.eclipse.microprofile.openapi.annotations.info.Info;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.transaction.Transactional;
import javax.validation.constraints.Positive;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.net.URI;
import java.util.List;

@ApplicationScoped
@Path("/groups/")
public class GroupService {

    @Inject
    GroupRepository groupRepository;

    @Inject
    EntityManager em;

    //region GET
    @GET
    @Operation(
            summary = "Get all Groups",
            description = "Get all Groups"
    )
    @Produces(MediaType.APPLICATION_JSON)
    public List<Group> getAllGroups() {
        return groupRepository.listAll();
    }

    //endregion

    //region POST
    @POST
    @Operation(
            summary = "Create a new Group",
            description = "Create a new Group. Don't pass the ID, because it will get auto-generated by the Database"
    )
    @Transactional
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    public Response create(Group group, @Context UriInfo info) {

        groupRepository.persist(group);
        return Response.
                created(URI.create(info.getPath() + "/" + group.getId()))
                .build();
    }
    //endregion

    //region DELETE
//    @DELETE
//    @Transactional
//    @Operation(
//            summary = "Delete Group by ID"
//    )
//    @Path("/{id}")
//    @Consumes(MediaType.APPLICATION_JSON)
//    @Produces(MediaType.APPLICATION_JSON)
//    public Response deleteById(@PathParam("id") String id) {
//        Group group = em.find(Group.class, id);
//        em.remove(group);
//        return Response.status(400).header("Reason", "Group mit id " + id + " existiert nicht").build();
//    }
    //endregion

}

