package at.htl.boundary;

import at.htl.model.Questionnaire;
import at.htl.repositories.QuestionnaireRepository;
import org.eclipse.microprofile.openapi.annotations.Operation;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.transaction.Transactional;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

@Path("/questionnaire")
public class QuestionnaireService {

    @Inject
    QuestionnaireRepository qr;

    @Inject
    EntityManager em;

    @GET
    @Operation(
            summary = "Get all Questionnaires"
    )
    @Produces(MediaType.APPLICATION_JSON)
    public List<Questionnaire> getAllQuestionnaires() {
        return qr.listAll();
    }

    @GET
    @Operation(
            summary = "Get a Questionnaire by ID"
    )
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Questionnaire getQuestionnaireById(@PathParam("id") Long id) {
        return qr.findById(id);
    }

    @GET
    @Operation(
            summary = "Get Markdown Text of the Questionnaire"
    )
    @Path("/{id}/markdown")
    @Produces(MediaType.TEXT_PLAIN)
    public String getMarkdown(@PathParam("id") Long id) {
        return qr.findById(id).getMarkdown();
    }

    @GET
    @Operation(
            summary = "Get Markdown Text of the Questionnaire by Name of it"
    )
    @Path("/{name}/markdown/name")
    @Produces(MediaType.TEXT_PLAIN)
    public String getMarkdownByName(@PathParam("name") String name) {

        TypedQuery<Questionnaire> tq = em.createNamedQuery("Questionnaire.getQuestionnaireByName", Questionnaire.class)
                .setParameter("NAME", name);
        Questionnaire q = tq.getSingleResult();
        return q.getMarkdown();
    }

    @GET
    @Operation(
            summary = "Get Fieldnames of Questionnaire"
    )
    @Path("/{id}/fieldnames-id")
    @Produces(MediaType.APPLICATION_JSON)
    public List<String> getFieldnames(@PathParam("id") Long id) {
        return qr.findById(id).getFieldNames();
    }

    @GET
    @Operation(
            summary = "Get Fieldnames of Questionnaire"
    )
    @Path("/{name}/fieldnames")
    @Produces(MediaType.APPLICATION_JSON)
    public List<List<String>> getFieldnamesByName(@PathParam("name") String name) {

        TypedQuery<Questionnaire> tq = em.createNamedQuery("Questionnaire.getQuestionnaireByName", Questionnaire.class)
                .setParameter("NAME", name);
        List<Questionnaire> questionnaires = tq.getResultList();
        List<List<String>> fieldnames = new ArrayList<>();

        questionnaires.forEach(q -> fieldnames.add(q.getFieldNames()));

        return fieldnames;
    }

    @POST
    @Operation(
            summary = "Create a new Questionnaire",
            description = "Create a new Questionnaire. Don't pass an ID because it will be auto-generated by the Database."
    )
    @Transactional
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(Questionnaire questionnaire, @Context UriInfo info) {
        qr.merge(questionnaire);
        return Response.created(URI.create(info.getPath())).build();
    }

    @DELETE
    @Transactional
    @Operation(
            summary = "Delete a Questionnaire by ID"
    )
    @Path("/{id}/questionnaire-id")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response deleteById(@PathParam("id") long id) {
        try {
            Questionnaire q = qr.findById(id);
            qr.deleteById(id);
            return Response.status(200).header("Deleted", q.getName()).build();
        } catch (Exception e) {
            return Response.status(400).header("Reason", "Questionnaire mit id " + id + " existiert nicht").build();
        }

    }

}
